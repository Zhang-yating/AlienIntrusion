import pygame as pg
from pygame.constants import RLEACCEL
from Element import *
from gameFuntion import *

from pygame.locals import(
    KEYDOWN,
    K_LEFT,
    K_RIGHT,
    K_SPACE,
    QUIT,
)

pg.init()

#set the screen
screen = pg.display.set_mode((900, 700)) 
tank = Tank((440, 650))
AllSprite = pg.sprite.Group()
AllSprite.add(tank)
bullets = pg.sprite.Group()
bricks = pg.sprite.Group()

BRICKS = pg.USEREVENT+1
pg.time.set_timer(BRICKS, 2000)
Game_over = False
running = True
while running:
    screen.fill((0, 0, 0))
    
    for event in pg.event.get():
        if event.type == QUIT:# when clicking the close button of the window, the program quits.
            running = False

        if event.type == KEYDOWN and event.key == K_SPACE:
            new_bullet = Bullet(tank.get_bullet_pos())# a new bullet will be created every time space is pressed
            AllSprite.add(new_bullet)
            bullets.add(new_bullet)

        if event.type == BRICKS:#the event for creating bricks occurs
        # a list of coordinates of the  bricks, the coors are randomly generated by a function
            posList = get_a_pos_for_bricks(get_random_amount_of_bricks())
            # MagicBricks will be generated with a probability of 10%

            if setBoomBrick_chance(3):
                new_brick = BombBrick(posList[0])
                bricks.add(new_brick)
                AllSprite.add(new_brick)
                for i in posList[1:]:
                    new_brick = Brick(i)
                    bricks.add(new_brick)
                    AllSprite.add(new_brick)

            else:
                for i in posList:
                    if setMagicBrick_chance(1):
                        new_brick = MagicBrick(i)
                    else:
                        new_brick = Brick(i) # normal brick will be generated with a probability of 90%

            
                    bricks.add(new_brick)# add all the bricks generated into Group
                    AllSprite.add(new_brick)

            
    pressed_key = pg.key.get_pressed()
    tank.move(5, pressed_key)

    update_bullet(bullets, bricks,screen) #move the bullets in bullets Group upwards or kill the bullet and brick if they are collide with each other
    update_brick(bricks, screen) #move the bricks in bricks Group downwards or kill it if drops on the ground
    draw_all_the_sprites(AllSprite, screen)
    pg.display.flip()
        

    
    

    